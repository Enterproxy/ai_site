"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/explore/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   askChat: () => (/* binding */ askChat),\n/* harmony export */   baseDocuments: () => (/* binding */ baseDocuments),\n/* harmony export */   deleteDocument: () => (/* binding */ deleteDocument),\n/* harmony export */   fetchDocument: () => (/* binding */ fetchDocument),\n/* harmony export */   fetchDocumentById: () => (/* binding */ fetchDocumentById),\n/* harmony export */   fetchDocuments: () => (/* binding */ fetchDocuments),\n/* harmony export */   saveEditedDocument: () => (/* binding */ saveEditedDocument),\n/* harmony export */   sendChatMessage: () => (/* binding */ sendChatMessage),\n/* harmony export */   updateDocument: () => (/* binding */ updateDocument),\n/* harmony export */   uploadDocument: () => (/* binding */ uploadDocument)\n/* harmony export */ });\nconst LOCAL_STORAGE_KEY = 'uploadedDocs';\nfunction loadUploadedDocs() {\n    if (false) {}\n    try {\n        const json = localStorage.getItem(LOCAL_STORAGE_KEY);\n        return json ? JSON.parse(json) : [];\n    } catch (e) {\n        console.error('loadUploadedDocs error', e);\n        return [];\n    }\n}\nfunction saveUploadedDocs(docs) {\n    if (false) {}\n    try {\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(docs));\n    } catch (e) {\n        console.error('saveUploadedDocs error', e);\n    }\n}\nasync function saveEditedDocument(id, data) {\n    const res = await fetch(\"/api/documents/\".concat(id), {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    });\n    if (!res.ok) {\n        console.error('❌ Błąd zapisu edytowanego dokumentu:', await res.text());\n        throw new Error('Nie udało się zapisać zmian');\n    }\n    return res.json();\n}\nconst baseDocuments = [\n    {\n        id: 'fallback-1',\n        title: 'Prezentacja Ewolucja Różnicowa',\n        author: 'Bartek R',\n        date: '2023-05-01',\n        language: 'polski',\n        tags: [\n            'ewolucja różnicowa',\n            'algorytm genetyczny'\n        ],\n        keywords: [\n            'ai',\n            'prezentacja'\n        ],\n        content: '',\n        fileUrl: '/uploads/ts426kk7pm8dwg68gnlhc0klm.pdf',\n        thumbnailUrl: '/thumbnails/cjfgyy30hcv580fczfvq84xl4.png'\n    },\n    {\n        id: 'fallback-2',\n        title: 'Broszura Fiat Tipo',\n        author: 'Fiat',\n        date: '2022-11-15',\n        language: 'angielski',\n        tags: [\n            'fiat',\n            'samochód'\n        ],\n        keywords: [\n            'broszura'\n        ],\n        content: '',\n        fileUrl: '/uploads/drgu12wy7lwclya0ano8c5tgly.pdf',\n        thumbnailUrl: '/thumbnails/kenidayr2tjik17ivpcojp63x.png'\n    },\n    {\n        id: 'fallback-3',\n        title: 'Broszura Hyundai i30',\n        author: 'Hyundai',\n        date: '2024-02-10',\n        language: 'angielski',\n        tags: [\n            'samochód',\n            'hyundai',\n            'i30'\n        ],\n        keywords: [\n            'broszura'\n        ],\n        content: '',\n        fileUrl: '/uploads/o0ffhapl3f06x2h5b4k0hg51b.pdf',\n        thumbnailUrl: '/thumbnails/fe5n1mb17k8t31r3apiw1vw0t.png'\n    },\n    {\n        id: 'fallback-4',\n        title: 'Dokument urzędowy',\n        author: 'Urząd skarbowy',\n        date: '2024-02-10',\n        language: 'polski',\n        tags: [\n            'dokument'\n        ],\n        keywords: [\n            'podatki',\n            'opłaty'\n        ],\n        content: '',\n        fileUrl: '/uploads/qongt15vnxl8con0qhrkbqlob.pdf',\n        thumbnailUrl: '/thumbnails/cukuk497ajdntty91thqxkdn5.png'\n    },\n    {\n        id: 'fallback-5',\n        title: 'Instrukcja Radio Blaupunkt',\n        author: 'Balupunkt',\n        date: '2024-02-10',\n        language: 'wielojęzyczny',\n        tags: [\n            'instrukcja',\n            'blaupunkt'\n        ],\n        keywords: [\n            'radio'\n        ],\n        content: '',\n        fileUrl: '/uploads/y1bjhspbabmv85yxsgzwa8819.pdf',\n        thumbnailUrl: '/thumbnails/oay2t86j2hw15eiff5xeqhkos.png'\n    }\n];\nasync function fetchDocuments(filters, query) {\n    const res = await fetch('/api/documents');\n    const text = await res.text();\n    if (!res.ok) {\n        let errMsg = text;\n        try {\n            const json = JSON.parse(text);\n            errMsg = json.error || JSON.stringify(json);\n        } catch (e) {}\n        console.error('Błąd pobierania dokumentów:', res.status, errMsg);\n        return baseDocuments // fallback w przypadku błędu\n        ;\n    }\n    let all = [];\n    try {\n        all = JSON.parse(text);\n    } catch (e) {\n        console.error('Błąd parsowania JSON:', e);\n        return baseDocuments;\n    }\n    if (all.length === 0) {\n        return baseDocuments;\n    }\n    // filtrowanie\n    return all.filter((doc)=>{\n        var _doc_author, _doc_language;\n        const matchesQuery = !query || doc.title.toLowerCase().includes(query.toLowerCase());\n        const matchesAuthor = !(filters === null || filters === void 0 ? void 0 : filters.author) || ((_doc_author = doc.author) === null || _doc_author === void 0 ? void 0 : _doc_author.toLowerCase().includes(filters.author.toLowerCase()));\n        const matchesLanguage = !(filters === null || filters === void 0 ? void 0 : filters.language) || ((_doc_language = doc.language) === null || _doc_language === void 0 ? void 0 : _doc_language.toLowerCase().includes(filters.language.toLowerCase()));\n        const tagFilter = ((filters === null || filters === void 0 ? void 0 : filters.tags) || []).filter((t)=>t);\n        const matchesTags = tagFilter.length === 0 || tagFilter.every((t)=>{\n            var _doc_tags;\n            return (_doc_tags = doc.tags) === null || _doc_tags === void 0 ? void 0 : _doc_tags.includes(t);\n        });\n        const docDate = new Date(doc.date || '');\n        const matchesDateFrom = !(filters === null || filters === void 0 ? void 0 : filters.dateFrom) || docDate >= new Date(filters.dateFrom);\n        const matchesDateTo = !(filters === null || filters === void 0 ? void 0 : filters.dateTo) || docDate <= new Date(filters.dateTo);\n        return matchesQuery && matchesAuthor && matchesLanguage && matchesTags && matchesDateFrom && matchesDateTo;\n    });\n}\nasync function fetchDocument(id) {\n    const res = await fetch(\"/api/documents/\".concat(id));\n    if (!res.ok) return null;\n    return res.json();\n}\nasync function askChat(prompt) {\n    const res = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            prompt\n        })\n    });\n    if (!res.ok) {\n        console.error('❌ Błąd czatu:', await res.text());\n        return 'Nie udało się uzyskać odpowiedzi.';\n    }\n    const json = await res.json();\n    return json.reply || 'Brak odpowiedzi.';\n}\nasync function sendChatMessage(messages) {\n    const res = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            messages\n        })\n    });\n    if (!res.ok) {\n        console.error('❌ Błąd czatu:', await res.text());\n        return 'Nie udało się uzyskać odpowiedzi.';\n    }\n    const json = await res.json();\n    return json.reply || 'Brak odpowiedzi.';\n}\nasync function fetchDocumentById(id) {\n    const res = await fetch(\"/api/documents/\".concat(id));\n    if (!res.ok) return null;\n    return res.json();\n}\nasync function updateDocument(id, data) {\n    const docs = loadUploadedDocs();\n    const idx = docs.findIndex((d)=>d.id === id);\n    if (idx !== -1) {\n        docs[idx] = {\n            ...docs[idx],\n            ...data\n        };\n        saveUploadedDocs(docs);\n    }\n}\nasync function deleteDocument(id) {\n    const res = await fetch(\"/api/documents/\".concat(id), {\n        method: 'DELETE'\n    });\n    if (!res.ok) {\n        const txt = await res.text().catch(()=>res.statusText);\n        console.error('❌ deleteDocument error:', res.status, txt);\n        throw new Error('Usuwanie dokumentu nie powiodło się');\n    }\n}\nasync function uploadDocument(file, metadata) {\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('title', metadata.title || file.name);\n    formData.append('author', metadata.author || '');\n    formData.append('date', metadata.date || new Date().toISOString());\n    formData.append('language', metadata.language || '');\n    formData.append('tags', JSON.stringify(metadata.tags || []));\n    formData.append('keywords', JSON.stringify(metadata.keywords || []));\n    formData.append('content', metadata.content || '');\n    if (metadata.thumbnail) {\n        formData.append('thumbnail', metadata.thumbnail);\n    }\n    const res = await fetch('/api/documents', {\n        method: 'POST',\n        body: formData\n    });\n    const text = await res.text();\n    console.log('uploadDocument status', res.status, 'body', text);\n    if (!res.ok) throw new Error(text || res.statusText);\n    return JSON.parse(text);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});